{"ast":null,"code":"var _jsxFileName = \"/Users/ajablonsk1/Desktop/projects/elevator-system/frontend/src/components/UpdateElevatorForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Button, Form } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useFocusEffect } from \"@react-navigation/core\";\nimport Api from \"./Api\";\nimport BackHeader from \"./BackHeader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UpdateElevatorForm = () => {\n  _s();\n\n  const floors = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  const [currentFloor, setCurrentFloor] = useState('');\n  const [destinationFloor, setDestinationFloor] = useState('');\n  const [id, setId] = useState('');\n  const [elevators, setElevators] = useState([]);\n  const navigate = useNavigate();\n  useFocusEffect(React.useCallback(() => {\n    Api.get(\"/api/v1/elevators\").then(res => {\n      setElevators(res.data);\n    }).catch(e => {\n      console.log(e);\n    });\n  }, []));\n  useEffect(() => {\n    console.log(\"XD\");\n\n    if (elevators.length > 0) {\n      setId(elevators[0].id);\n    }\n\n    setCurrentFloor('0');\n    setDestinationFloor('0');\n  }, [elevators]);\n\n  const onSubmit = e => {\n    e.preventDefault();\n    Api.put(\"/api/v1/elevator\", {\n      id: id,\n      currentFloor: currentFloor,\n      destinationFloor: destinationFloor\n    }).then(res => {\n      console.log(res.data);\n    }).catch(e => {\n      console.log(e);\n    });\n    navigate(\"/simulation\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(BackHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      className: \"w-50\",\n      style: {\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        marginTop: '20px'\n      },\n      onSubmit: onSubmit,\n      id: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Select elevator's id\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n          value: id,\n          onChange: e => setId(e.target.value),\n          children: elevators.map((elevator, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            children: elevator.id\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Current floor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n          value: currentFloor,\n          onChange: e => setCurrentFloor(e.target.value),\n          children: floors.map((floor, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            children: floor\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Destination floor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n          value: destinationFloor,\n          onChange: e => setDestinationFloor(e.target.value),\n          children: floors.map((floor, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            children: floor\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UpdateElevatorForm, \"8bHw/WPLe0RB/nuMuNnHGir1tIU=\", false, function () {\n  return [useNavigate, useFocusEffect];\n});\n\n_c = UpdateElevatorForm;\nexport default UpdateElevatorForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateElevatorForm\");","map":{"version":3,"sources":["/Users/ajablonsk1/Desktop/projects/elevator-system/frontend/src/components/UpdateElevatorForm.js"],"names":["React","useState","useEffect","Button","Form","useNavigate","useFocusEffect","Api","BackHeader","UpdateElevatorForm","floors","currentFloor","setCurrentFloor","destinationFloor","setDestinationFloor","id","setId","elevators","setElevators","navigate","useCallback","get","then","res","data","catch","e","console","log","length","onSubmit","preventDefault","put","marginLeft","marginRight","marginTop","target","value","map","elevator","index","floor"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {Button, Form} from \"react-bootstrap\";\nimport {useNavigate} from \"react-router-dom\";\nimport { useFocusEffect } from \"@react-navigation/core\";\nimport Api from \"./Api\";\nimport BackHeader from \"./BackHeader\";\n\nconst UpdateElevatorForm = () => {\n    const floors = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    const [currentFloor, setCurrentFloor] = useState('')\n    const [destinationFloor, setDestinationFloor] = useState('')\n    const [id, setId] = useState('')\n    const [elevators, setElevators] = useState([])\n    const navigate = useNavigate()\n\n    useFocusEffect(\n        React.useCallback(() => {\n        Api.get(\"/api/v1/elevators\"\n        ).then(res => {\n            setElevators(res.data)\n        }).catch((e) => {\n            console.log(e)\n        })\n    }, []))\n\n    useEffect(() => {\n        console.log(\"XD\")\n        if(elevators.length > 0){\n            setId(elevators[0].id)\n        }\n        setCurrentFloor('0')\n        setDestinationFloor('0')\n    }, [elevators])\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n        Api.put(\"/api/v1/elevator\", {\n            id: id,\n            currentFloor: currentFloor,\n            destinationFloor: destinationFloor\n        }).then(res => {\n            console.log(res.data)\n        }).catch(e => {\n            console.log(e)\n        })\n        navigate(\"/simulation\")\n    }\n\n    return (\n        <div>\n            <BackHeader />\n            <Form\n                className=\"w-50\"\n                style={{ marginLeft: 'auto', marginRight: 'auto', marginTop: '20px' }}\n                onSubmit={onSubmit}\n                id='form'\n            >\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Select elevator's id</Form.Label>\n                    <Form.Select\n                        value={id}\n                        onChange={(e) => setId(e.target.value)}\n                    >\n                        {elevators.map((elevator, index) => (\n                            <option key={index}>{elevator.id}</option>\n                        ))}\n                    </Form.Select>\n                </Form.Group>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Current floor</Form.Label>\n                    <Form.Select\n                        value={currentFloor}\n                        onChange={(e) => setCurrentFloor(e.target.value)}\n                    >\n                        {floors.map((floor, index) => (\n                            <option key={index}>{floor}</option>\n                        ))}\n                    </Form.Select>\n                </Form.Group>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Destination floor</Form.Label>\n                    <Form.Select\n                        value={destinationFloor}\n                        onChange={(e) => setDestinationFloor(e.target.value)}>\n                        {floors.map((floor, index) => (\n                            <option key={index}>{floor}</option>\n                        ))}\n                    </Form.Select>\n                </Form.Group>\n                <Button variant=\"primary\" type=\"submit\">\n                    Update\n                </Button>\n            </Form>\n        </div>\n    );\n};\n\nexport default UpdateElevatorForm;"]},"metadata":{},"sourceType":"module"}